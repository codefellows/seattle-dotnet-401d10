// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentEnrollmentDemoD10.Data;

namespace StudentEnrollmentDemoD10.Migrations
{
    [DbContext(typeof(StudentEnrollmentDbContext))]
    [Migration("20200402215042_newSeededData")]
    partial class newSeededData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Technology")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CourseCode = "dotnet-d10",
                            Price = 100m,
                            Technology = 0
                        },
                        new
                        {
                            ID = 2,
                            CourseCode = "Intro to Underwater Basketweaving",
                            Price = 50m,
                            Technology = 1
                        },
                        new
                        {
                            ID = 3,
                            CourseCode = "How to Talk to Ducks",
                            Price = 550m,
                            Technology = 3
                        });
                });

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Enrollments", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Birthdate = new DateTime(2020, 3, 26, 14, 50, 41, 213, DateTimeKind.Local).AddTicks(2807),
                            FirstName = "Josie",
                            LastName = "Cat"
                        },
                        new
                        {
                            ID = 2,
                            Birthdate = new DateTime(2019, 12, 2, 14, 50, 41, 221, DateTimeKind.Local).AddTicks(6094),
                            FirstName = "Belle",
                            LastName = "Kitty"
                        },
                        new
                        {
                            ID = 3,
                            Birthdate = new DateTime(2020, 4, 20, 14, 50, 41, 221, DateTimeKind.Local).AddTicks(6265),
                            FirstName = "Munchkin",
                            LastName = "KitCat"
                        });
                });

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Transcripts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Transcripts");
                });

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Enrollments", b =>
                {
                    b.HasOne("StudentEnrollmentDemoD10.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentDemoD10.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentEnrollmentDemoD10.Models.Transcripts", b =>
                {
                    b.HasOne("StudentEnrollmentDemoD10.Models.Course", "Course")
                        .WithMany("Transcripts")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentDemoD10.Models.Student", "Student")
                        .WithMany("Transcripts")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
